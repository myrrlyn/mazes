#!/usr/bin/env ruby

require "bundler/setup"
require "mazes"

dims = Hash.new
dims[0] = ARGV[1].nil? ? 4 : ARGV[1].to_i
dims[1] = ARGV[2].nil? ? 4 : ARGV[2].to_i
count = ARGV[-1].nil? ? 100 : ARGV[-1].to_i

case ARGV[0]
when "bt" then Mazes::Algorithms.demo_basic \
	dims: dims, algo: Mazes::Cartesian::BinaryTree
when "btd" then Mazes::Algorithms.demo_dist \
	dims: dims, algo: Mazes::Cartesian::BinaryTree
when "btt" then Mazes::Algorithms.demo_trace \
	dims: dims, algo: Mazes::Cartesian::BinaryTree
when "btm" then Mazes::Algorithms.demo_max \
	dims: dims, algo: Mazes::Cartesian::BinaryTree
when "btc" then Mazes::Algorithms.demo_color \
	dims: dims, algo: Mazes::Cartesian::BinaryTree
when "btmc" then Mazes::Algorithms.demo_max_color \
	dims: dims, algo: Mazes::Cartesian::BinaryTree
when "sw" then Mazes::Algorithms.demo_basic \
	dims: dims, algo: Mazes::Cartesian::Sidewinder
when "swd" then Mazes::Algorithms.demo_dist \
	dims: dims, algo: Mazes::Cartesian::Sidewinder
when "swt" then Mazes::Algorithms.demo_trace \
	dims: dims, algo: Mazes::Cartesian::Sidewinder
when "swm" then Mazes::Algorithms.demo_max \
	dims: dims, algo: Mazes::Cartesian::Sidewinder
when "swc" then Mazes::Algorithms.demo_color \
	dims: dims, algo: Mazes::Cartesian::Sidewinder
when "swmc" then Mazes::Algorithms.demo_max_color \
	dims: dims, algo: Mazes::Cartesian::Sidewinder
when "ab" then Mazes::Algorithms.demo_basic \
	dims: dims, algo: Mazes::Algorithms::AldousBroder
when "abd" then Mazes::Algorithms.demo_dist \
	dims: dims, algo: Mazes::Algorithms::AldousBroder
when "abt" then Mazes::Algorithms.demo_trace \
	dims: dims, algo: Mazes::Algorithms::AldousBroder
when "abm" then Mazes::Algorithms.demo_max \
	dims: dims, algo: Mazes::Algorithms::AldousBroder
when "abc" then Mazes::Algorithms.demo_color \
	dims: dims, algo: Mazes::Algorithms::AldousBroder
when "abmc" then Mazes::Algorithms.demo_max_color \
	dims: dims, algo: Mazes::Algorithms::AldousBroder
when "w" then Mazes::Algorithms.demo_basic \
	dims: dims, algo: Mazes::Algorithms::Wilsons
when "wd" then Mazes::Algorithms.demo_dist \
	dims: dims, algo: Mazes::Algorithms::Wilsons
when "wt" then Mazes::Algorithms.demo_trace \
	dims: dims, algo: Mazes::Algorithms::Wilsons
when "wm" then Mazes::Algorithms.demo_max \
	dims: dims, algo: Mazes::Algorithms::Wilsons
when "wc" then Mazes::Algorithms.demo_color \
	dims: dims, algo: Mazes::Algorithms::Wilsons
when "wmc" then Mazes::Algorithms.demo_max_color \
	dims: dims, algo: Mazes::Algorithms::Wilsons
when "abw" then Mazes::Algorithms.demo_basic \
	dims: dims, algo: Mazes::Algorithms::AldousBroderWilsons
when "abwd" then Mazes::Algorithms.demo_dist \
	dims: dims, algo: Mazes::Algorithms::AldousBroderWilsons
when "abwt" then Mazes::Algorithms.demo_trace \
	dims: dims, algo: Mazes::Algorithms::AldousBroderWilsons
when "abwm" then Mazes::Algorithms.demo_max \
	dims: dims, algo: Mazes::Algorithms::AldousBroderWilsons
when "abwc" then Mazes::Algorithms.demo_color \
	dims: dims, algo: Mazes::Algorithms::AldousBroderWilsons
when "abwmc" then Mazes::Algorithms.demo_max_color \
	dims: dims, algo: Mazes::Algorithms::AldousBroderWilsons
when "hk" then Mazes::Algorithms.demo_basic \
	dims: dims, algo: Mazes::Algorithms::HunterKiller
when "hkd" then Mazes::Algorithms.demo_dist \
	dims: dims, algo: Mazes::Algorithms::HunterKiller
when "hkt" then Mazes::Algorithms.demo_trace \
	dims: dims, algo: Mazes::Algorithms::HunterKiller
when "hkm" then Mazes::Algorithms.demo_max \
	dims: dims, algo: Mazes::Algorithms::HunterKiller
when "hkc" then Mazes::Algorithms.demo_color \
	dims: dims, algo: Mazes::Algorithms::HunterKiller
when "hkmc" then Mazes::Algorithms.demo_max_color \
	dims: dims, algo: Mazes::Algorithms::HunterKiller
when "rb" then Mazes::Algorithms.demo_basic \
	dims: dims, algo: Mazes::Algorithms::RecursiveBacktracker
when "rbd" then Mazes::Algorithms.demo_dist \
	dims: dims, algo: Mazes::Algorithms::RecursiveBacktracker
when "rbt" then Mazes::Algorithms.demo_trace \
	dims: dims, algo: Mazes::Algorithms::RecursiveBacktracker
when "rbm" then Mazes::Algorithms.demo_max \
	dims: dims, algo: Mazes::Algorithms::RecursiveBacktracker
when "rbc" then Mazes::Algorithms.demo_color \
	dims: dims, algo: Mazes::Algorithms::RecursiveBacktracker
when "rbmc" then Mazes::Algorithms.demo_max_color \
	dims: dims, algo: Mazes::Algorithms::RecursiveBacktracker
when "test" then
	m = Mazes::Cartesian::Mask.new x: 10, y: 10
	2.times do |x|
		2.times do |y|
			m[x, y] = false
			m[5 - x, 5 - y] = false
			m[9 - x, y] = false
			m[x, 9 - y] = false
			m[9 - x, 9 - y] = false
		end
	end
	s = Mazes::Cartesian::MaskSpace.new mask: m
	Mazes::Algorithms::RecursiveBacktracker.act_on space: s
	puts s
when "stats" then Mazes::Stats.run size: dims, tries: count
when "report" then Mazes::Stats.report
else puts dims
end
